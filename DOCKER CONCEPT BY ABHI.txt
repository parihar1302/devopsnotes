  

 #  HYpervizer - to run virtual machine

 #  Virtualization - one OS is not connected to other OS in same machine 
                    thats called Virtualization


 #   Docker - no OS , means more space, less cost
              no service will run in back end of that server
              a perticular service (where traffic will be more) of an application can diploy again n again in container.
 
ff #   DIFFERENCE
    
    I.) HYPERVIZER SENERIO :-  SERVER-HYPERVIZER-VM-OS-APPLICATION
   
    II.) DOCKER SENERIO :-     SERVER-DOCKER-CONTAINER-APPLICATION


5864442b4bf9414683365de233033cb2
 for jenkins administrator
0051bffd7d9d4690a24ea3312b3a74b2
90ee1d6cc64c4d38b4a819916d1b63ed

docker.pem connect
ssh -i "docker.pem" ubuntu@ec2-13-232-121-72.ap-south-1.compute.amazonaws.com
ssh -i "docker.pem" ubuntu@ec2-52-66-130-128.ap-south-1.compute.amazonaws.com


docker insatll in 1 command in ubuntu 
curl -sSL https://get.docker.com/ | sh


13.232.121.72:8080 
ip of docker machin


vi Vagrantfile (:-while creating VM in vi Vagrantfile cmd u need to modify ip address and memory)
* 'i' or 'a'        = to get into insert mode
* 'Esc'             = exit from insert mode
* ':wq'or':x'or'zz' = to save
* ':q!'or'ZQ'       = exit widout saving




 ************ CREATING A DOCKER IMAGE AND SHARE IN DOCKER HUB
 
# login to your server & update the repository
$  ssh root@192.168.1.248

$  apt-get update                                                           Redis :-  it is a nosql key value data store with hashes, list, data structre & etc. 
  
                                                                                    while using it give very fast respons time.
# install docker.io                                                                   persistent storage is avilabe so even if system is rebooted ,data won't get lost
$ apt-get install docker.io

# start docker service & enable it to start at boot time
$ systemctl start docker

$ systemctl enable docker
                                                                                                          


$ mkdir Redis_Docker_Image     {creating redis directory/folder}
 
$ cd Redis_Docker_Image        {enter in directory/folder }

$ sudo touch Dockerfile        { create docker file}

$ vi Dockerfile 
                                {i/q - to enter in terminal}
# Set the base image            {Esc - to exit, :wq - to savevi }
FROM ubuntu
# Dockerfile author / maintainer 
MAINTAINER Name <email.id@here>


# Update application repository list and install the Redis server. 
RUN apt-get update && apt-get install -y redis-server


# Expose default port
EXPOSE 6379
# Set the default command
ENTRYPOINT ["/usr/bin/redis-server"]

Esc = to comout from vi mode.

:wq = to save changes ]
                      ]


$ docker build -t redis-server .     {build used to convert dockerfile to docker image}

$ docker run --name redis_instance -t redis-server

["note=docker tag imageid abhisingh1302/imagename:latest" to ]
l                                                   |
                                               {importnt chek tag with the hlep of docker images}
 # docker hub pushing image

$ docker login

$ docker push abhisingh1302/redisserver

{note:- to use your image ,firt u need to delet previous redisserver image & than pull from dockerhub account}

$ docker rmi imageid   (to delete image)

$ docker pull abhisingh1302/redisserver     (to pull image from your dockerhub account)
              or
$ docker run abhisingh1302/redisserver     